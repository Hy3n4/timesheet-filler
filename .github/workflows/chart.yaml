name: Helm Chart Release

on:
  push:
    tags:
      - "helm-v*.*.*"
    branches:
      - main

permissions:
  contents: write
  pages: write
  packages: write

jobs:
  release-chart:
    name: Release Helm Chart
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Helm
        uses: azure/setup-helm@v4.2.0

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Extract Version
        id: extract_version
        run: |
          # If triggered by repository_dispatch, use the provided helm_tag
          if [[ "${{ github.event_name }}" == "repository_dispatch" ]]; then
            TAG="${{ github.event.client_payload.helm_tag }}"
            VERSION=${TAG#helm-v}
            echo "Using version from dispatch event: $VERSION"
          # If manually triggered with version input, use that
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.version }}" != "" ]]; then
            VERSION="${{ github.event.inputs.version }}"
            echo "Using manually provided version: $VERSION"
          else
            # Extract version from git tag (remove 'helm-v' prefix)
            TAG=${GITHUB_REF#refs/tags/}
            VERSION=${TAG#helm-v}
            echo "Using version from git tag: $VERSION"
          fi

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=helm-v$VERSION" >> $GITHUB_OUTPUT

      - name: Update Chart Version
        run: |
          VERSION="${{ steps.extract_version.outputs.version }}"

          # Update Chart.yaml version
          CHART_PATH="helm/timesheet-filler/Chart.yaml"
          sed -i "s/^version:.*/version: $VERSION/" $CHART_PATH

          # If appVersion is used, update that too
          sed -i "s/^appVersion:.*/appVersion: $VERSION/" $CHART_PATH

          echo "Updated chart version to $VERSION"
          cat $CHART_PATH

          # Commit the version change if this is a manual run
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            git add $CHART_PATH
            git commit -m "Bump chart version to $VERSION [skip ci]"

            # Create tag for the chart version
            git tag "chart-$VERSION"

            # Push changes and tag
            git push origin HEAD:${GITHUB_REF_NAME}
            git push origin "chart-$VERSION"
          fi

      - name: Package Helm Chart
        id: package
        run: |
          VERSION="${{ steps.extract_version.outputs.version }}"
          CHART_PATH="helm/timesheet-filler"

          # Create output directory
          mkdir -p .cr-release-packages

          # Package the chart
          helm package "$CHART_PATH" --version "$VERSION" -d .cr-release-packages

          # Get the package name
          PACKAGE_FILE=$(ls .cr-release-packages/timesheet-filler-*.tgz)
          PACKAGE_NAME=$(basename $PACKAGE_FILE)
          echo "package=$PACKAGE_FILE" >> $GITHUB_OUTPUT
          echo "package_name=$PACKAGE_NAME" >> $GITHUB_OUTPUT

          # Create a GitHub release
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            TAG="chart-$VERSION"
          else
            TAG="${{ steps.extract_version.outputs.tag }}"
          fi

          echo "Creating GitHub release for tag: $TAG"

      - name: Upload Chart to GitHub Release
        id: release
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ steps.package.outputs.package }}
          tag_name: ${{ github.event_name == 'workflow_dispatch' && format('chart-{0}', steps.extract_version.outputs.version) || github.ref_name }}
          name: "Helm Chart ${{ steps.extract_version.outputs.version }}"
          body: "Helm chart release version ${{ steps.extract_version.outputs.version }}"

      - name: Update Helm Repository Index
        run: |
          VERSION="${{ steps.extract_version.outputs.version }}"
          PACKAGE_NAME="${{ steps.package.outputs.package_name }}"
          REPO_URL="https://github.com/${{ github.repository }}/releases/download/${{ github.event_name == 'workflow_dispatch' && format('chart-{0}', steps.extract_version.outputs.version) || github.ref_name }}"

          # Create .cr-index directory
          mkdir -p .cr-index

          # Download existing index if it exists
          curl -sSf https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/index.yaml -o .cr-index/index.yaml || true

          # Use proper URL for the chart package
          if [ -f .cr-index/index.yaml ]; then
            # Update existing index
            helm repo index --url "$REPO_URL" --merge .cr-index/index.yaml .cr-release-packages
          else
            # Create new index
            helm repo index --url "$REPO_URL" .cr-release-packages
          fi

          # Move the updated index to cr-index directory
          mv .cr-release-packages/index.yaml .cr-index/index.yaml

          # Debug: Check the generated index.yaml
          echo "Generated index.yaml content:"
          cat .cr-index/index.yaml

      - name: Push Helm Repository to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: .cr-index
          keep_files: true

      - name: Wait for GitHub Pages
        run: |
          echo "Waiting for GitHub Pages to update (30s)..."
          sleep 30

      - name: Verify Chart Release
        run: |
          VERSION="${{ steps.extract_version.outputs.version }}"
          echo "Attempting to verify chart version $VERSION was published..."
          MAX_ATTEMPTS=5
          ATTEMPT=1
          SUCCESS=false

          while [ $ATTEMPT -le $MAX_ATTEMPTS ] && [ "$SUCCESS" = false ]; do
            echo "Verification attempt $ATTEMPT of $MAX_ATTEMPTS"
            if curl -s -f https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/index.yaml > /dev/null; then
              echo "✅ index.yaml found!"
              if curl -s https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/index.yaml | grep -q "timesheet-filler-$VERSION"; then
                echo "✅ Chart 'timesheet-filler-$VERSION' found in index.yaml!"
                SUCCESS=true
              else
                echo "❌ Chart 'timesheet-filler-$VERSION' not found in index.yaml"
              fi
            else
              echo "❌ index.yaml not available yet"
            fi

            if [ "$SUCCESS" = false ]; then
              if [ $ATTEMPT -lt $MAX_ATTEMPTS ]; then
                echo "Waiting 15 seconds before next attempt..."
                sleep 15
              fi
              ATTEMPT=$((ATTEMPT+1))
            fi
          done

          if [ "$SUCCESS" = true ]; then
            echo "Verification successful! Chart version $VERSION has been published."
            echo "Chart URL: https://github.com/${{ github.repository }}/releases/download/${{ github.event_name == 'workflow_dispatch' && format('chart-{0}', steps.extract_version.outputs.version) || github.ref_name }}/${{ steps.package.outputs.package_name }}"
          else
            echo "Warning: Could not verify chart publication after $MAX_ATTEMPTS attempts."
            echo "This does not necessarily mean the release failed - GitHub Pages may just take longer to update."
            echo "Check https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/index.yaml manually."
          fi
